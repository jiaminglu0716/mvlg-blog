<%
page.layout = "gamer"
page.title = theme.gamer.title || __('gamer.title')
page.subtitle = theme.gamer.subtitle || __('gamer.subtitle')
page.banner_img = page.banner_img || theme.gamer.banner_img
page.banner_img_height = page.banner_img_height || theme.gamer.banner_img_height
page.banner_mask_alpha = page.banner_mask_alpha || theme.gamer.banner_mask_alpha
%>


<style type="text/css">
.search {
  width: 100%; 
  height: 3rem; 
  padding: 5px;
  border: none; 
  outline: none;
  border-bottom: 1px solid grey;
}
</style>


<div id="app" style="width:100%;">
  <div>
    <div>
      <div>
        <select style="width: 100%; height: 3rem; text-align: center;"
          @change="loadDataEvent($event)">
          <optgroup :label="group.ch_name" v-for="(group, gidx) in gamer.groups" :key="gidx">
            <!-- Select标签内@click事件监听失效。以下为弃用代码组
              <option v-for="(item, idx) in group.list" v-key="idx"
              @click="loadData(item.link)"> -->
            <option v-for="(item, idx) in group.list" :key="idx"
              :value="item.link">
              {{ item.type }}
            </option>
          </optgroup>
        </select>
      </div>
      <div>
        <input type="text" 
          class="search"
          placeholder="please use space to split multi-keyword."
          v-model="message.keyword"
          @input="searchData" />
      </div>
    </div>
  </div>
  <div style="margin-top: 1rem;">
    <ul style="margin-left: -2rem;">
      <div v-for="item in message.results" v-key="item.id">
        <a href="" 
          class='list-group-item list-group-item-action font-weight-bolder search-list-title'>
          【{{ item.id.value }}】{{ item.cn_name }}
        </a>
        <div style="display: flex; line-height: 20px; margin-left: 2rem;">
          <label>语言： </label>
          <p style="margin-right: 5px;" v-for="lang in item.langs">{{ lang }}</p>
        </div>
        <div style="display: flex; line-height: 20px; margin-left: 2rem;">
          <label>类型：</label>
          <p style="margin-right: 5px;" v-for="gen in item.genres">{{ gen }}</p>
        </div>
      </div>
      
    </ul>
  </div>
</div>


<script>
new Vue({
  el: '#app',
  data: {
    gamer: {
      gs: new LinkGroupDict()
        .add('Sony', new LinkGroup()
          .add(new LinkItem('PSV', '/psv_all.json', 'PSV'))
          .add(new LinkItem('PSP', '/psp.json', 'PSP'))
          .add(new LinkItem('PS1', '/ps1.json', 'PS1'))
          .add(new LinkItem('PS2', '/ps2jp.json', 'PS2'))
          .add(new LinkItem('PS3', '/ps3.json', 'PS3'))),
      groups: [
        {
          group: 'Sony',
          ch_name: '索尼',
          list: [
            {
              type: 'PSV',
              link: '/data/gamer/psv_all.json'
            },
            {
              type: 'PSP',
              link: '/data/gamer/psp.json'
            },
            {
              type: 'PS1',
              link: '/data/gamer/ps1.json'
            },
            {
              type: 'PS2',
              link: '/data/gamer/ps2jp.json'
            },
            {
              type: 'PS3',
              link: '/data/gamer/ps3.json'
            },
          ]
        },
        {
          group: 'Nintendo',
          ch_name: '任天堂',
          list: [
            {
              type: 'New 3DS',
              link: '/data/gamer/3dsnew.json'
            },
            {
              type: '3DS',
              link: '/data/gamer/3ds.json'
            },
            {
              type: 'NDS',
              link: '/data/gamer/nds.json'
            },
            {
              type: 'GBA',
              link: '/data/gamer/gba.json'
            },
            {
              type: 'WII',
              link: '/data/gamer/wii.json'
            },
          ]
        },
        {
          group: 'Microsoft',
          ch_name: '微软',
          list: [
            {
              type: 'XBOX',
              link: '/data/gamer/xbox.json'
            },
            {
              type: 'XBOX360',
              link: '/data/gamer/xbox360.json'
            },
          ]
        },
        {
          group: 'Others',
          ch_name: '未分类',
          list: [
            {
              type: 'FC',
              link: '/data/gamer/fc.json'
            },
            {
              type: 'N64',
              link: '/data/gamer/n64.json'
            },
            {
              type: 'SFC',
              link: '/data/gamer/sfc.json'
            },
            {
              type: 'SS',
              link: '/data/gamer/ss.json'
            },
            {
              type: 'WSC',
              link: '/data/gamer/wsc.json'
            },
          ]
        }
      ]
    },
    message: {
      kwl: 0,
      keyword: '',
      data: [],
      results: []
    }
  },
  async mounted() {
    await this.loadData(this.gamer.groups[0].list[0].link)
    // 默认搜索列表示例。
    await this.$set(this.message, 'results', this.search("伊苏 langs:英语", this.message.data));
  },
  methods: {
    getList(link) {
      return $.ajax(url=link);
    },
    loadDataEvent(event) {
      this.loadData(event.target.value);
    },
    async loadData(link) {
      // join the path of link with current domain
      // link = window.location.origin + link;
      // Clear result list
      this.$set(this.message, 'results', []);
      // Get data from api
      let message = await this.getList(link);
      // to dto list
      message = await new YL2000DataLoader('PSV', message.content).toList();
      // Set data
      this.$set(this.message, 'data', message);
    },
    searchData() {
      let keyword = this.message.keyword;

      // ban backward search
      if (keyword.length < this.kwl) {
        this.$set(this.message, 'kwl', keyword.length);
        return;
      }
      // ban start step below 2
      if (keyword.length < 2) return;

      let results = this.search(keyword, this.message.data);
      this.$set(this.message, 'results', results);
    },
    search(keyword, data, defaultKeys=['name', 'cn_name']) {
      // 解析关键词
      class FilterItem {
        constructor(key, value) {
          this.key = key;
          this.value = value;
        }
      }
      let filters = [];
      let keywords = [];

      keyword.split(' ').forEach(key => {
        let idx = key.indexOf(':');
        key = key.toLowerCase();
        if (idx > -1) {
          filters.push(new FilterItem(
            key.slice(0,idx),
            key.slice(idx+1)
          ));
        } else {
          keywords.push(key);
        }
      });

      console.log(keywords, filters)

      // 提取数据文件
      function obj2str(item, keys, sign='/') {
        let strArr = [];
        keys.forEach(key => strArr.push(item[key]));
        return strArr.join(sign);
      }

      function match(str, mstr) {
        return str.indexOf(mstr) > -1;
      }

      function boolArrReduce(arr) {
        return arr.reduce((p, c) => p & c);
      }


      let results = [];

      for (let item of data) {
        let s = obj2str(item, defaultKeys).toLowerCase();

        let ks = keywords.map(key => match(s, key));
        let fs = filters.map(filter => match(item[filter.key].join('/'), filter.value));
        
        if (
          (fs.length > 0 && ks.length == 0 && boolArrReduce(fs)) ||
          (fs.length == 0 && ks.length > 0 && boolArrReduce(ks)) ||
          (fs.length > 0 && ks.length > 0 && boolArrReduce(fs) && boolArrReduce(ks))
        ) {
          results.push(item);
        }
      }
      
      return results;      
    }
  }
})

</script>


